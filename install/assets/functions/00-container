#!/usr/bin/with-contenv bash

source /assets/defaults/00-container

### Colours
# Foreground (Text) Colors
cbl="\e[30m"       # Color Black
cdr="\e[31m"       # Color Dark Red
cdg="\e[32m"       # Color Dark Green
cdy="\e[33m"       # Color Dark Yellow
cdb="\e[34m"       # Color Dark Blue
cdm="\e[35m"       # Color Dark Magenta
cdc="\e[36m"       # Color Dark Cyan
cdgy="\e[90m"      # Color Dark Gray
clgy="\e[37m"      # Color Light Gray
clr="\e[91m"       # Color Light Red
clg="\e[92m"       # Color Light Green
cly="\e[93m"       # Color Light Yellow
clb="\e[94m"       # Color Light Blue
clm="\e[95m"       # Color Light Magenta
clc="\e[96m"       # Color Light Cyan
cwh="\e[97m"       # Color White

# Turns off all formatting
coff="\e[0m"       # Color Off

# Background Colors
bbl="\e[40m"       # Background Color Black
bdr="\e[41m"       # Background Color Dark Red
bdg="\e[42m"       # Background Color Dark Green
bdy="\e[43m"       # Background Color Dark Yellow
bdb="\e[44m"       # Background Color Dark Blue
bdm="\e[45m"       # Background Color Dark Magenta
bdc="\e[46m"       # Background Color Dark Cyan
bdgy="\e[100m"     # Background Color Dark Gray
blgy="\e[47m"      # Background Color Light Gray
blr="\e[101m"      # Background Color Light Red
blg="\e[102m"      # Background Color Light Green
bly="\e[103m"      # Background Color Light Yellow
blb="\e[104m"      # Background Color Light Blue
blm="\e[105m"      # Background Color Light Magenta
blc="\e[106m"      # Background Color Light Cyan
bwh="\e[107m"      # Background Color White
boff="\e[49m"      # Background Color Off

# Styles
sbo="\e[1m"        # Style Bold
sdi="\e[2m"        # Style Dim
sun="\e[4m"        # Style Underline
sbl="\e[5m"        # Style Blink
sre="\e[7m"        # Style Reverse
shi="\e[8m"        # Style Hidden
sbof="\e[21m"      # Style Bold Off
sdif="\e[22m"      # Style Dim Off
sunf="\e[24m"      # Style Underline Off
sblf="\e[25m"      # Style Blink Off
sref="\e[27m"      # Style Reverse Off
shif="\e[28m"      # Style Hidden Off


### Check to see Initialization Script ran
check_container_initialized() {
    print_debug "Checking to see if container initialization scripts have completed"
    output_off
    while [ ! -f /tmp/state/99-container-init ]; do
      print_debug "Checking to see if container initialization scripts have completed"
      sleep 1
    done
    output_on
}

check_service_initialized() {
    ## Usage:
    ## check_service_initialized init: Look for the matching filename of /etc/services.available/<folder-name> in /tmp/state/<folder-name>-init
    ## ## check_service_initialized <service folder> Look for the matching filename of /etc/services.available/<folder-name> in /tmp/state/<folder-name>
    ## Related to liftoff function, which writes /tmp/state/script|foldername
    ## Scripts that run in /etc/cont-init.d get an -init at the end of their filename
    ## Scripts that run from /etc/services.available/* just get the foldername without any suffix
    print_debug "Checking to see if service has initialized"
    output_off
    if [ "$1" = "init" ]; then
        service_suffix="-init"
        csi_bypass=FALSE
    else
        service="$1"
        csi_bypass=TRUE
    fi

    if [ "$csi_bypass" = "FALSE" ] ; then
        if [ -z "$2" ]; then
            case "$(dirname "$0")" in
                "/var/run/s6/etc/cont-init.d")
                    service=$(basename "$0")
                ;;
                *)
                    service=$(basename "$PWD")
                ;;
            esac
        else
            service=$2
        fi
    fi

    while [ ! -f /tmp/state/"${service}"${service_suffix} ]
    do
      sleep 1
      print_debug "Looking for existence of /tmp/state/${service}${service_suffix}"
    done
    unset csi_bypass
    output_on
}

create_logrotate() {
## Usage <Logrotate Config Name> <path> (optional user) (optional group)
## e.g. create_logrotate cron /var/log/cron/cron.log root root
    if [ -n "$1" ] && [ -n "$2" ]; then
        print_debug "Creating Logrotate Entry for $2"
        if [ -n "$1" ] && [ -n "$2" ]; then
            lruser="    su $3 $4"
        fi
        if [ ! -d "/etc/logrotate.d" ] ; then
            mkdir -p /etc/logrotate.d
        fi
        cat <<EOF > /etc/logrotate.d/"$1"
$2 {
    daily
    ifempty
    rotate 7
    missingok
    compress
    dateext
    copytruncate
    ${lruser}
}
EOF
        chown root:root /etc/logrotate.d/${1}
        chmod 0644 /etc/logrotate.d/${1}
    fi
}

custom_files() {
    ## Copy files from one lcoation to somewhere else on the file system
    ## eg. Copy all files in /assets/custom (Default ENV CONTAINER_CUSTOM_PATH) to /www/html  'custom_files /www/html'
    ## Add another parameter if you want to move any source folder to a destination ie `custom_files /assets/customfolder2/ /destination`
    if [ -n "${2}" ] ; then
        ccustom_files_source="${1}"
        ccustom_files_destination="${2}"
    else
        ccustom_files_source="${CONTAINER_CUSTOM_PATH}"
        ccustom_files_destination="${1}"
    fi

    if [ -d "${ccustom_files_source}" ] && dir_notempty ; then
        print "Custom Files: Copying files from '${ccustom_files_source}' to '${ccustom_files_destination}'"
        if [ -d "${ccustom_files-destination}" ] ; then
            mkdir -p "${ccustom_files-destination}"
        fi
        cp -a "${ccustom_files_source}"/* "${ccustom_files_destination}"/
    fi
}

custom_scripts() {
    ## Execute Custom scripts out of this directory
    if [ -n "${1}" ] ; then
        ccustom_scripts_source="${1}"
    else
        ccustom_scripts_source="${CONTAINER_CUSTOM_SCRIPTS_PATH}"
    fi

    if [ -d "${ccustom_scripts_source}" ] && dir_notempty ; then
        for ccustom_script in ${ccustom_scripts_source}/*.sh ; do
            if [ -x "$ccustom_script" ] && [ ! -d "$ccustom_script" ] ; then
                print_debug "Custom Script executing: '${ccustom_script}'"
                exec ${ccustom_script}
            fi
        done
    fi
}

db_ready() {
    ## Usage db_ready <dbtype>
    output_off
    print_debug "Checking to see if Database Type $1 is ready"
    case "$1" in
        "couch" | "couchdb" )
            if [ -n "${DB_PORT}" ] ; then couch_port=${DB_PORT} ; fi ;
            if [ -n "${COUCHDB_PORT}" ] ; then couch_port=${COUCHDB_PORT} ; fi ;
            couch_port=${couch_port:-5984}
            if [ -n "${DB_HOST}" ] ; then couch_host=${DB_HOST} ; fi ;
            if [ -n "${COUCHDB_HOST}" ] ; then couch_host=${COUCHDB_HOST} ; fi ;
            counter=0
            # shellcheck disable=SC2086
            while ! (nc -z "${couch_host}" ${couch_port}) ; do
                sleep 5
                (( counter+=5 ))
                print_warn "CouchDB Host '${couch_host}' is not accessible, retrying.. ($counter seconds so far)"
            done
        ;;
        "influx" | "influxdb" )
            if [ -n "${DB_PORT}" ] ; then influx_port=${DB_PORT} ; fi ;
            if [ -n "${INFLUXDB_PORT}" ] ; then influx_port=${INFLUXDB_PORT} ; fi ;
            influx_port=${influx_port:-8088}
            if [ -n "${DB_HOST}" ] ; then influx_host=${DB_HOST} ; fi ;
            if [ -n "${INFLUXDB_HOST}" ] ; then influx_host=${INFLUXDB_HOST} ; fi ;
            counter=0
            while ! (nc -z "${influx_host}" "${influx_port}") ; do
                sleep 5
                (( counter+=5 ))
                print_warn "InfluxDB Host '${influx_host}' is not accessible, retrying.. ($counter seconds so far)"
            done
        ;;
        "mongo" | "mongodb" )
            if [ -n "${DB_PORT}" ] ; then mongo_port=${DB_PORT} ; fi ;
            if [ -n "${MONGO_PORT}" ] ; then mongo_port=${MONGO_PORT} ; fi ;
            mongo_port=${mongo_port:-27017}
            if [ -n "${DB_HOST}" ] ; then mongo_host=${DB_HOST} ; fi ;
            if [ -n "${MONGO_HOST}" ] ; then mongo_host=${MONGO_HOST} ; fi ;
            counter=0
            while ! (nc -z "${mongo_host}" "${mongo_port}") ; do
                sleep 5
                (( counter+=5 ))
                print_warn "Mongo Host '${mongo_host}' is not accessible, retrying.. ($counter seconds so far)"
            done
        ;;
        "mysql" | "mariadb" | "MARIADB" | "MYSQL" )
            if [ -n "${DB_PORT}" ] ; then maria_port=${DB_PORT} ; fi ;
            if [ -n "${MYSQL_PORT}" ] ; then maria_port=${MYSQL_PORT} ; fi ;
            if [ -n "${MARIA_PORT}" ] ; then maria_port=${MARIA_PORT} ; fi ;
            maria_port=${maria_port:-3306}
            if [ -n "${DB_HOST}" ] ; then maria_host=${DB_HOST} ; fi ;
            if [ -n "${MYSQL_HOST}" ] ; then maria_host=${MYSQL_HOST} ; fi ;
            if [ -n "${MARIA_HOST}" ] ; then maria_host=${MARIA_HOST} ; fi ;
            if [ -n "${DB_USER}" ] ; then maria_user=${DB_USER} ; fi ;
            if [ -n "${MYSQL_USER}" ] ; then maria_user=${MYSQL_USER} ; fi ;
            if [ -n "${MARIA_USER}" ] ; then maria_user=${MARIA_USER} ; fi ;
            if [ -n "${DB_PASS}" ] ; then maria_pass=${DB_PASS} ; fi ;
            if [ -n "${MYSQL_PASS}" ] ; then maria_pass=${MYSQL_PASS} ; fi ;
            if [ -n "${MARIA_PASS}" ] ; then maria_pass=${MARIA_PASS} ; fi ;
            if [ -n "${DB_NAME}" ] ; then maria_name=${DB_NAME} ; fi ;
            if [ -n "${MYSQL_NAME}" ] ; then maria_name=${MYSQL_NAME} ; fi ;
            if [ -n "${MARIA_NAME}" ] ; then maria_name=${MARIA_NAME} ; fi ;
            counter=0
            while ! (mysql -u"${maria_user}" -P"${maria_port}" -h"${maria_host}" -p"${maria_pass}" -e "SELECT COUNT(*) FROM information_schema.FILES;" 2>&1 | grep -E "COUNT|Enter" > /dev/null 2>&1) ; do
              sleep 5
              (( counter+=5 ))
              print_warn "MySQL/MariaDB Server '${maria_host}' is not accessible, retrying.. ($counter seconds so far)"
            done
        ;;
        "pgsql" | "psql" | "postgres" | "postgresql" )
            if [ -n "${DB_PORT}" ] ; then postgres_port=${DB_PORT} ; fi ;
            if [ -n "${POSTGRES_PORT}" ] ; then postgres_port=${MYSQL_PORT} ; fi ;
            postgres_port=${postgres_port:-5432}
            if [ -n "${DB_HOST}" ] ; then postgres_host=${DB_HOST} ; fi ;
            if [ -n "${POSTGRES_HOST}" ] ; then postgres_host=${POSTGRES_HOST} ; fi ;
            if [ -n "${DB_USER}" ] ; then postgres_user=${DB_USER} ; fi ;
            if [ -n "${POSTGRES_USER}" ] ; then postgres_user=${POSTGRES_USER} ; fi ;
            if [ -n "${DB_PASS}" ] ; then postgres_pass=${DB_PASS} ; fi ;
            if [ -n "${PGPASSWORD}" ] ; then postgres_pass=${PGPASSWORD} ; fi ;
            if [ -n "${DB_NAME}" ] ; then postgres_name=${DB_NAME} ; fi ;
            if [ -n "${POSTGRES_NAME}" ] ; then postgres_name=${POSTGRES_NAME} ; fi ;
            counter=0
            export PGPASSWORD=${postgres_pass}
            until pg_isready --dbname="${postgres_name}" --host="${postgres_host}" --port="${postgres_port}" --username="${postgres_user}" -q
            do
                sleep 5
                (( counter+=5 ))
                print_warn "Postgres Host '${postgres_host}' is not accessible, retrying.. ($counter seconds so far)"
            done
        ;;
        "rabbit" | "rabbitmq" )
            if [ -n "${DB_PORT}" ] ; then rabbit_port=${DB_PORT} ; fi ;
            if [ -n "${RABBIT_PORT}" ] ; then rabbit_port=${RABBIT_PORT} ; fi ;
            rabbit_port=${rabbit_port:-5672}
            if [ -n "${DB_HOST}" ] ; then rabbit_host=${DB_HOST} ; fi ;
            if [ -n "${RABBIT_HOST}" ] ; then rabbit_host=${RABBIT_HOST} ; fi ;
            counter=0
            while ! (nc -z "${rabbit_host}" "${rabbit_port}") ; do
                sleep 5
                (( counter+=5 ))
                print_warn "RabbitMQ Host '${rabbit_host}' is not accessible, retrying.. ($counter seconds so far)"
            done
        ;;
        "redis" )
            if [ -n "${DB_PORT}" ] ; then redis_port=${DB_PORT} ; fi ;
            if [ -n "${REDIS_PORT}" ] ; then redis_port=${REDIS_PORT} ; fi ;
            redis_port=${redis_port:-6379}
            if [ -n "${DB_HOST}" ] ; then redis_host=${DB_HOST} ; fi ;
            if [ -n "${REDIS_HOST}" ] ; then redis_host=${REDIS_HOST} ; fi ;
            counter=0
            while ! (nc -z "${redis_host}" "${redis_port}") ; do
                sleep 5
                (( counter+=5 ))
                print_warn "Redis Host '${redis_host}' is not accessible, retrying.. ($counter seconds so far)"
            done
        ;;
        "rethink" )
            if [ -n "${DB_PORT}" ] ; then rethink_port=${DB_PORT} ; fi ;
            if [ -n "${RETHINK_PORT}" ] ; then rethink_port=${RETHINK_PORT} ; fi ;
            rethink_port=${rethink_port:-28015}
            if [ -n "${DB_HOST}" ] ; then rethink_host=${DB_HOST} ; fi ;
            if [ -n "${RETHINK_HOST}" ] ; then rethink_host=${RETHINK_HOST} ; fi ;
            counter=0
            while ! (nc -z "${rethink_host}" "${rethink_port}") ; do
                sleep 5
                (( counter+=5 ))
                print_warn "RethinkDB Host '${DB_HOST}' is not accessible, retrying.. ($counter seconds so far)"
            done
        ;;
    esac
    output_on
}

dir_empty(){
    [ ! -n "$(ls -A $1)" ]
}

dir_notempty(){
    [ -n "$(ls -A "$1")" ]
}

## Docker Secrets Support
## usage: file_env VAR [DEFAULT]
##    ie: file_env 'XYZ_DB_PASSWORD' 'example'
##        (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature)
file_env() {
  if [ "$CONTAINER_ENABLE_DOCKER_SECRETS" = "TRUE" ] || [ "$CONTAINER_ENABLE_DOCKER_SECRETS" = "true" ] ; then
      local var="$1"
      local fileVar="${var}_FILE"
      local def="${2:-}"
      local val="$def"
      if [ "${!fileVar:-}" ]; then
        val="$(cat "${!fileVar}")"
      elif [ "${!var:-}" ]; then
        val="${!var}"
      fi

      if [ -z "${val}" ]; then
        print_error "error: neither $var nor $fileVar are set but are required"
        exit 1
      fi
      export "$var"="$val"
      unset "$fileVar"
  fi
}

## Get Defaults
## Usage: get_defaults <option>
##      Option: all - Load all default files from /assets/defaults folder
##      Option: app | single - Load existing scripts defaults from /assets/defaults (e.g. If cont-init.d/10-app is running load 10-app from defaults)
##      Option: 10-app,11-app,12-app - Load in Sequence all of these Default Files from /assets/defaults/
##         Leaving option blank will load all files from the /assets/defaults folder
get_defaults() {
    if [ -n "$1" ] ; then
        case "$1" in
            "ALL" | "all" )
                for d in /assets/defaults/* ; do
                    print_debug "Container: Getting defaults for $d"
                    # shellcheck source=/assets/defaults/
                    source "$d"
                done
            ;;
            "APP" | "app" | "SINGLE" | "single" )
                case "$(dirname "$0")" in
                    "/var/run/s6/etc/cont-init.d")
                        if [ -f "/assets/defaults/$(basename "$0")" ] ; then
                            print_debug "Container: Getting defaults for $(basename "$0")"
                            # shellcheck source=/assets/defaults/
                            source /assets/defaults/00-container
                            source /assets/defaults/"$(basename "$0")"
                        else
                            print_debug "Container: No defaults available for $(basename "$0")"
                        fi
                    ;;
                    *)
                        if [ -f "/assets/defaults/$(basename "$PWD")" ] ; then
                            print_debug "Container: Getting defaults for $(basename "$PWD")"
                            # shellcheck source=/assets/defaults/
                            source /assets/defaults/00-container
                            source /assets/defaults/"$(basename "$PWD")"
                        else
                            print_debug "Container: No defaults available for $(basename "$PWD")"
                        fi
                    ;;
                esac
            ;;
            * )
                defaults=$(echo "$1" | tr "," "\n")
                    for d in $defaults; do
                        if [ -f "/assets/defaults/${d}" ] ; then
                            print_debug "Container: Getting defaults for $d"
                            # shellcheck source=/assets/defaults/
                            source /assets/defaults/00-container
                            source /assets/defaults/"${d}"
                        else
                            print_debug "Container: No defaults available for $d"
                        fi
                    done
            ;;
        esac
    else
        for d in /assets/defaults/* ; do
            print_debug "Container: Getting Defaults for $d"
            # shellcheck source=/assets/defaults/
            source /assets/defaults/00-container
            source "$d"
        done
    fi
}

## Get Functions
## Usage: get_functions <option>
## Option: all - Load all default files from /assets/functions folder
## Option: app | single - Load existing scripts defaults from /assets/functions (e.g. If cont-init.d/10-app is running load 10-app from functions)
## Option: 10-app,11-app,12-app - Load in Sequence all of these Default Files from /assets/functions/
## Leaving option blank will load all files from the /assets/functions folder
get_functions() {
    if [ -n "$1" ] ; then
        case "$1" in
            "ALL" | "all" )
                for f in /assets/functions/* ; do
                    if [ "$f" != "/assets/functions/00-container" ] ; then
                        print_debug "Container: Getting functions for $f"
                        # shellcheck source=/assets/functions/
                        source "$f"
                    fi
                done
            ;;
            "APP" | "app" | "SINGLE" | "single" )
                case "$(dirname "$0")" in
                    "/var/run/s6/etc/cont-init.d")
                        if [ -f "/assets/functions/$(basename "$0")" ] ; then
                            print_debug "Container: Getting functions for $(basename "$0")"
                            # shellcheck source=/assets/functions/
                            source /assets/functions/"$(basename "$0")"
                        else
                            print_debug "Container: No functions available for $(basename "$0")"
                        fi
                    ;;
                    *)
                        if [ -f "/assets/functions/$(basename "$PWD")" ] ; then
                            print_debug "Container: Getting functions for $(basename "$PWD")"
                            # shellcheck source=/assets/functions/
                            source /assets/functions/"$(basename "$PWD")"
                        else
                            print_debug "Container: No functions available for $(basename "$PWD")"
                        fi
                    ;;
                esac
            ;;
            * )
                functions=$(echo "$1" | tr "," "\n")
                for f in $functions; do
                    if [ -f "/assets/functions/${f}" ] ; then
                        print_debug "Container: Getting functions for $f"
                        # shellcheck source=/assets/functions/
                        source /assets/functions/"${f}"
                    else
                        print_debug "Container: No functions available for: $f"
                    fi
                done
            ;;
        esac
    else
        for f in /assets/functions/* ; do
            if [ "$f" != "/assets/functions/00-container" ] ; then
                print_debug "Container: Getting functions for $f"
                # shellcheck source=/assets/functions/
                source "$f"
            fi
        done
    fi
}

grant_sudo() {
## Grant sudo priveleges to a user
## grant_sudo (username) (command) | If no command set will be ALL
    if [ -n "$1" ] ; then
        if [ -n "$2" ] ; then
            sudo_command="$2"
        else
            sudo_command="ALL"
        fi
        print_debug "Adding Sudo privileges to '$1' for '${sudo_command}' command"
        echo "%$1 ALL=(ALL) NOPASSWD:${sudo_command}" >> /etc/sudoers
    fi
}

log_prefix() {
    if [ "${CONTAINER_ENABLE_LOG_PREFIX}" = "TRUE" ] || [ "${CONTAINER_ENABLE_LOG_PREFIX}" = "true" ] ; then
        echo "$(date +"${CONTAINER_LOG_PREFIX_DATE_FMT}")${CONTAINER_LOG_PREFIX_SEPERATOR}$(date +"${CONTAINER_PROCESS_HELPER_TIME_FMT}") "
    fi
}

## For writing script initalization state to ensure proper application execution
liftoff() {
    output_off
    mkdir -p /tmp/state
    if [ "$DONOTSTART" = "TRUE" ]; then
        liftoff_prefix="DONOTSTART "
    fi
    case "$(dirname "$0")" in
        "/var/run/s6/etc/cont-init.d")
            echo "${liftoff_prefix} $(basename "$0")-init initialized on $(log_prefix)" >> /tmp/state/"$(basename "$0")"-init
        ;;
        *)
            if [ ! -f /tmp/state/"$(basename "$PWD")" ]; then
                echo "$(basename "$PWD") initialized on $(log_prefix)" >> /tmp/state/"$(basename "$PWD")"
            else
                echo "$(basename "$PWD") reinitialized on $(log_prefix)" >> /tmp/state/"$(basename "$PWD")"
            fi
        ;;
    esac
    output_on
}

## An attempt to shut down so much noise in the log files, specifically for echo statements
output_off() {
    if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ] ; then
        set +x
    fi
}

output_on() {
    if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ] ; then
        set -x
    fi
}

## Prepare Service by loading defaults and functions
## Relies on get_defaults and get_functions above in script
## Usage: prepare_service <options>
## By default if script is running before container has initialized then both defaults and functions are loaded
## If running outside of /etc/cont-init.d pass 'defaults' or 'functions' to only load specific types (Useful when not wanting to load the entire function file in /etc/services.d)
prepare_service() {
    if [ -n "$1" ] ; then
        case "$(dirname "$0")" in
            "/var/run/s6/etc/cont-init.d")
                    get_defaults "$1"
                    get_functions "$1"
            ;;
        *)
                case "$1" in
                    "BOTH" | "both" | "ALL" | "all" )
                        get_defaults "$2"
                        get_functions "$2"
                    ;;
                    "DEFAULTS" | "defaults" )
                        get_defaults "$2"
                    ;;
                    "FUNCTIONS" | "functions" )
                        get_functions "$2"
                    ;;
                esac
            ;;
        esac
    else
        case "$(dirname "$0")" in
            "/var/run/s6/etc/cont-init.d")
                get_defaults
                get_functions
            ;;
        *)
                get_defaults
            ;;
        esac
    fi
}

### Text Coloration
print_debug() {
    output_off
    case "$CONTAINER_LOG_LEVEL" in
            "DEBUG" )
                if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ] ; then
                    if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
                        echo -e "$(log_prefix)[DEBUG] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
                    else
                        echo -e "$(log_prefix)${bdm}[DEBUG]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
                    fi
                else
                    if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
                        echo -e "$(log_prefix)[DEBUG] ** [${PROCESS_NAME}] $1"
                    else
                        echo -e "$(log_prefix)${bdm}[DEBUG]${boff} ** [${PROCESS_NAME}] $1"
                    fi
                fi
            ;;
    esac
    output_on
}

print_error() {
    output_off
    case "$CONTAINER_LOG_LEVEL" in
            "DEBUG" | "NOTICE" | "WARN" | "ERROR")
                if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ] ; then
                    if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
                        echo -e "$(log_prefix)[ERROR] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
                    else
                        echo -e "$(log_prefix)${blr}[ERROR]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
                    fi
                else
                    if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
                        echo -e "$(log_prefix)[ERROR] ** [${PROCESS_NAME}] $1"
                    else
                        echo -e "$(log_prefix)${blr}[ERROR]${boff} ** [${PROCESS_NAME}] $1"
                    fi
                fi
            ;;
    esac
    output_on
}

print_info() {
    output_off
    if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ] ; then
        if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
            echo -e "$(log_prefix)[INFO] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
        else
            echo -e "$(log_prefix)${bdg}[INFO]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
        fi
    else
        if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
            echo -e "$(log_prefix)[INFO] ** [${PROCESS_NAME}] $1"
        else
            echo -e "$(log_prefix)${bdg}[INFO]${boff} ** [${PROCESS_NAME}] $1"
        fi
    fi
    output_on
}

print_notice() {
    output_off

    case "$CONTAINER_LOG_LEVEL" in
            "DEBUG" | "NOTICE" )
                if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ] ; then
                    if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
                        echo -e "$(log_prefix)[NOTICE] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
                    else
                        echo -e "$(log_prefix)${bdgy}[NOTICE]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
                    fi
                else
                    if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
                        echo -e "$(log_prefix)[NOTICE] ** [${PROCESS_NAME}] $1"
                    else
                        echo -e "$(log_prefix)${bdgy}[NOTICE]${boff} ** [${PROCESS_NAME}] $1"
                    fi
                fi
            ;;
    esac
    output_on
}

print_start() {
    output_off
    if [ "${CONTAINER_ENABLE_PROCESS_COUNTER}" = "TRUE" ] || [ "${CONTAINER_ENABLE_PROCESS_COUNTER}" = "true" ]; then
        if [ -f /tmp/state/$(basename "$PWD") ]; then
            proc_start_count="$(cat /tmp/state/$(basename "$PWD") | wc -l)"
            proc_start_wrapper="[${proc_start_count}] "
        fi
    fi

    if [ "${CONTAINER_ENABLE_PROCESS_HELPER}" = "TRUE" ] || [ "${CONTAINER_ENABLE_PROCESS_HELPER}" = "true" ]; then
        proc_help_arg="$(date +"${CONTAINER_PROCESS_HELPER_DATE_FMT}") $(date +"${CONTAINER_PROCESS_HELPER_TIME_FMT}") $(basename "$(pwd)") ${proc_start_count} $(cat /etc/hostname)"
        if [ -d "${CONTAINER_PROCESS_HELPER_PATH}" ]; then
            if [ -f "${CONTAINER_PROCESS_HELPER_PATH}"/$(basename "$0").sh ]; then
                exec "${CONTAINER_PROCESS_HELPER_PATH}"/$(basename "$0").sh "${proc_help_arg}"
            elif [ -f "${CONTAINER_PROCESS_HELPER_PATH}"/"${CONTAINER_PROCESS_HELPER_SCRIPT}".sh ] ; then
                exec "${CONTAINER_PROCESS_HELPER_PATH}"/"${CONTAINER_PROCESS_HELPER_SCRIPT}".sh "${proc_help_arg}"
            fi
        fi
    fi

    if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ] ; then
        if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
            echo -e "$(log_prefix)[STARTING] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] ${proc_start_wrapper}$1"
        else
            echo -e "$(log_prefix)${bdg}[STARTING]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] ${proc_start_wrapper}$1"
        fi
    else
        if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
            echo -e "$(log_prefix)[STARTING] ** [${PROCESS_NAME}] ${proc_start_wrapper}$1"
        else
            echo -e "$(log_prefix)${bdg}[STARTING]${boff} ** [${PROCESS_NAME}] ${proc_start_wrapper}$1"
        fi
    fi

    output_on
}

print_warn() {
    output_off
    case "$CONTAINER_LOG_LEVEL" in
            "DEBUG" | "NOTICE" | "WARN" )
                if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ] ; then
                    if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
                        echo -e "$(log_prefix)[WARN] ** [${PROCESS_NAME}] $1"
                    else
                        echo -e "$(log_prefix)${bdb}[WARN]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
                    fi
                else
                    if [ "${CONTAINER_COLORIZE_OUTPUT}" = "FALSE" ] || [ "${CONTAINER_COLORIZE_OUTPUT}" = "false" ] ; then
                        echo -e "$(log_prefix)[WARN] ** [${PROCESS_NAME}] $1"
                    else
                        echo -e "$(log_prefix)${bdb}[WARN]${boff} ** [${PROCESS_NAME}] $1"
                    fi
                fi
    esac
    output_on
}

## Quiet down output
silent() {
  if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ] || [ "$SHOW_OUTPUT" = "TRUE" ] || [ "$SHOW_OUTPUT" = "true" ] || [ "$CONTAINER_LOG_LEVEL" = "DEBUG" ] ;  then
    "$@"
  else
    "$@" > /dev/null 2>&1
  fi
}

## Make sure DB is defined
## Old: sanity_db to check DB_USER, DB_PASS, DB_NAME, DB_HOST
## New: sanity_db (dbtype) which will test above or their own unique prefixes to be used with images that have multiuple DB connections
sanity_db() {
    output_off
    if [ -n "$1" ] ; then
        case "$1" in
            "couch" | "couchdb" )
                print_debug "Checking Couch DB Parameters"
                if [ -n "${DB_HOST}" ] ; then couch_host=${DB_HOST} ; fi ;
                if [ -n "${COUCH_HOST}" ] ; then couch_host=${COUCH_HOST} ; fi ;
                if [ -z "${couch_host}" ] ; then
                    print_error "No Couch Database Host Entered! - Set '\$DB_HOST' or '\$COUCH_HOST'"
                    exit 1
                fi
            ;;
            "influx" | "influxdb")
                print_debug "Checking Influx DB Parameters"
                if [ -n "${DB_HOST}" ] ; then influx_host=${DB_HOST} ; fi ;
                if [ -n "${INFLUX_HOST}" ] ; then influx_host=${INFLUX_HOST} ; fi ;
                if [ -z "${influx_host}" ] ; then
                    print_error "No Influx Database Host Entered! - Set '\$DB_HOST' or '\$INFLUX_HOST'"
                    exit 1
                fi
            ;;
            "mongo" | "mongodb" )
                print_debug "Checking Mongo DB Parameters"
                if [ -n "${DB_HOST}" ] ; then mongo_host=${DB_HOST} ; fi ;
                if [ -n "${MONGO_HOST}" ] ; then mongo_host=${MONGO_HOST} ; fi ;
                if [ -z "${mongo_host}" ] ; then
                    print_error "No Mongo Database Host Entered! - Set '\$DB_HOST' or '\$MONGO_HOST'"
                    exit 1
                fi
            ;;
            "mysql" | "mariadb" | "MARIADB" | "MYSQL" )
                print_debug "Checking MariaDB DB Parameters"
                if [ -n "${DB_HOST}" ] ; then maria_host=${DB_HOST} ; fi ;
                if [ -n "${MYSQL_HOST}" ] ; then maria_host=${MYSQL_HOST} ; fi ;
                if [ -n "${MARIA_HOST}" ] ; then maria_host=${MARIA_HOST} ; fi ;
                if [ -n "${DB_USER}" ] ; then maria_user=${DB_USER} ; fi ;
                if [ -n "${MYSQL_USER}" ] ; then maria_user=${MYSQL_USER} ; fi ;
                if [ -n "${MARIA_USER}" ] ; then maria_user=${MARIA_USER} ; fi ;
                if [ -n "${DB_PASS}" ] ; then maria_pass=${DB_PASS} ; fi ;
                if [ -n "${MYSQL_PASS}" ] ; then maria_pass=${MYSQL_PASS} ; fi ;
                if [ -n "${MARIA_PASS}" ] ; then maria_pass=${MARIA_PASS} ; fi ;
                if [ -n "${DB_NAME}" ] ; then maria_name=${DB_NAME} ; fi ;
                if [ -n "${MYSQL_NAME}" ] ; then maria_name=${MYSQL_NAME} ; fi ;
                if [ -n "${MARIA_NAME}" ] ; then maria_name=${MARIA_NAME} ; fi ;
                if [ -z "${maria_host}" ] ; then
                    print_error "No MariaDB Database Host Entered! - Set '\$DB_HOST' or '\$MARIA_HOST'"
                    exit 1
                fi
                if [ -z "${maria_name}" ] ; then
                    print_error "No MariaDB Database Name Entered! - Set '\$DB_NAME' or '\$MARIA_NAME'"
                    exit 1
                fi
                if [ -z "${maria_user}" ] ; then
                    print_error "No MariaDB Database USER Entered! - Set '\$DB_USER' or '\$MARIA_USER'"
                    exit 1
                fi
                if [ -z "${maria_pass}" ] ; then
                    print_error "No MariaDB Database Pass Entered! - Set '\$DB_PASS' or '\$MARIA_PASS'"
                    exit 1
                fi
            ;;
            "pgsql" | "psql" | "postgres" | "postgresql" )
                print_debug "Checking Postgres DB Parameters"
                if [ -n "${DB_HOST}" ] ; then postgres_host=${DB_HOST} ; fi ;
                if [ -n "${POSTGRES_HOST}" ] ; then postgres_host=${POSTGRES_HOST} ; fi ;
                if [ -n "${DB_USER}" ] ; then postgres_user=${DB_USER} ; fi ;
                if [ -n "${POSTGRES_USER}" ] ; then postgres_user=${POSTGRES_USER} ; fi ;
                if [ -n "${DB_PASS}" ] ; then postgres_pass=${DB_PASS} ; fi ;
                if [ -n "${PGPASSWORD}" ] ; then postgres_pass=${PGPASSWORD} ; fi ;
                if [ -n "${DB_NAME}" ] ; then postgres_name=${DB_NAME} ; fi ;
                if [ -n "${POSTGRES_NAME}" ] ; then postgres_name=${POSTGRES_NAME} ; fi ;
                if [ -z "${postgres_host}" ] ; then
                    print_error "No PostgreSQL Database Host Entered! - Set '\$DB_HOST' or '\$POSTGRES_HOST'"
                    exit 1
                fi
                if [ -z "${postgres_name}" ] ; then
                    print_error "No PostgreSQL Database Name Entered! - Set '\$DB_NAME' or '\$POSTGRES_NAME'"
                    exit 1
                fi
                if [ -z "${postgres_user}" ] ; then
                    print_error "No PostgreSQL Database USER Entered! - Set '\$DB_USER' or '\$POSTGRES_USER'"
                    exit 1
                fi
                if [ -z "${postgres_pass}" ] ; then
                    print_error "No PostgreSQL Database Pass Entered! - Set '\$DB_PASS' or '\$POSTGRES_PASS'"
                    exit 1
                fi
            ;;
            "rabbit" | "rabbitmq" )
                if [ -n "${DB_HOST}" ] ; then rabbit_host=${DB_HOST} ; fi ;
                if [ -n "${RABBIT_HOST}" ] ; then rabbit_host=${RABBIT_HOST} ; fi ;
                if [ -n "${RABBITMQ_HOST}" ] ; then rabbit_host=${RABBITMQ_HOST} ; fi ;
                if [ -z "${rethink_host}" ] ; then
                    print_error "No RabbitMQ Database Host Entered! - Set '\$DB_HOST' or '\$RABBIT_HOST'"
                    exit 1
                fi
            ;;
            "redis" )
                print_debug "Checking Redis DB Parameters"
                if [ -n "${DB_HOST}" ] ; then redis_host=${DB_HOST} ; fi ;
                if [ -n "${REDIS_HOST}" ] ; then redis_host=${REDIS_HOST} ; fi ;
                if [ -z "${redis_host}" ] ; then
                    print_error "No Redis Database Host Entered! - Set '\$DB_HOST' or '\$REDIS_HOST'"
                    exit 1
                fi
            ;;
            "rethink" )
                print_debug "Checking RethinkDB DB Parameters"
                if [ -n "${DB_HOST}" ] ; then rethink_host=${DB_HOST} ; fi ;
                if [ -n "${RETHINK_HOST}" ] ; then rethink_host=${RETHINK_HOST} ; fi ;
                if [ -z "${rethink_host}" ] ; then
                    print_error "No Rethink Database Host Entered! - Set '\$DB_HOST' or '\$RETHINK_HOST'"
                    exit 1
                fi
            ;;
        esac
        output_on
    else
        ## Legacy This will eventually be removed and replaced with this warning
        #print_debug "Skipping DB Checking because it is missing DB_TYPE argument"
        print_debug "Using Legacy db_ready command - please upgrade"
        if [ -z "${DB_HOST}" ]; then
            print_error "No Database Host Entered! - Set '\$DB_HOST'"
            exit 1
        fi

        if [ -z "${DB_NAME}" ]; then
            print_error "No Database Name Entered! - Set '\$DB_NAME'"
            exit 1
        fi

        if [ -z "${DB_USER}" ]; then
            print_error "No Database User Entered! - Set '\$DB_USER'"
            exit 1
        fi

        if [ -z "${DB_PASS}" ]; then
            print_error "No Database Password Entered! - Set '\$DB_PASS'"
            exit 1
        fi
        output_on
    fi
}

## Check is Variable is Defined
## Usage: sanity_var varname "Description"
sanity_var() {
    output_off
    print_debug "Looking for existence of $1 environment variable"
    if [ ! -v "$1" ]; then
        print_error "No '$2' Entered! - Set '\$$1'"
        exit 1
    fi
    output_on
}

## Services
service_start() {
    ln -sf /etc/services.available/"${1}" /etc/services.d/
}

service_stop() {
    if [ "${1}" != "$(basename "$0")" ] ; then
        echo "DONOTSTART added by $(basename \""$0"\")" >> /tmp/state/"${1}"-init
    fi
    DONOTSTART=TRUE
}

## Timezone Setup
set_timezone () {
    if [ -f /usr/share/zoneinfo/"${TIMEZONE}" ]; then
        if [ "${TIMEZONE}" != "$(cat /etc/timezone)" ] ; then
        print_notice "Timezone: Setting to '${TIMEZONE}' from '$(cat /etc/timezone)'"
        cp -R /usr/share/zoneinfo/"${1}" /etc/localtime
        echo "${1}" > /etc/timezone
        fi
    else
        print_warn "Timezone: ${TIMEZONE} does not exist - Using '$(cat /etc/timezone)'"
    fi
}

## Convert TRUE or FALSE statements to either yes or no
## Usage: 'truefalse_yesno varname'
## Don't prefix it with a $
## Optionally add "uppercase" / "lowercase" as second value on how you wish it to be replaced
truefalse_yesno() {
    value=$(set | grep "${1}"= | cut -d '=' -f2)
    var=$(set | grep "${1}"= | sed "s/=.*//g")

    if [ "$value" = "TRUE" ] || [ "$value" = "true" ] || [ "$value" = "YES" ] || [ "$value" = "yes" ] ; then
            print_debug "Converting Variable Name ${var} value to 'yes'"
            unset "$1"
            if [ -n "$2" ] ; then
                case "$2" in
                    "UPPERCASE" | "uppercase" | "UPPER" | "upper" | "UC" | "uc" )
                        export "$1=YES"
                    ;;
                    "LOWERCASE" | "lowercase" | "LOWER" | "lower" | "LC" | "lc" )
                        export "$1=yes"
                    ;;
                esac
            else
                export "$1=yes"
            fi
    elif [ "$value" = "FALSE" ] || [ "$value" = "false" ] || [ "$value" = "NO" ] || [ "$value" = "no" ] ; then
            print_debug "Converting Variable Name ${var} value to 'no'"
            unset "$1"
            if [ -n "$2" ] ; then
                case "$2" in
                    "UPPERCASE" | "uppercase" | "UPPER" | "upper" | "UC" | "uc" )
                        export "$1=NO"
                    ;;
                    "LOWERCASE" | "lowercase" | "LOWER" | "lower" | "LC" | "lc" )
                        export "$1=no"
                    ;;
                esac
            else
                export "$1=no"
            fi
    fi
}

## Convert TRUE or FALSE statements to either yes or no
## Usage: 'truefalse_yesno varname'
## Don't prefix it with a $
## Optionally add "uppercase" / "lowercase" as second value on how you wish it to be replaced
truefalse_onoff() {
    value=$(set | grep "${1}"= | cut -d '=' -f2)
    var=$(set | grep "${1}"= | sed "s/=.*//g")

    if [ "$value" = "TRUE" ] || [ "$value" = "true" ] || [ "$value" = "YES" ] || [ "$value" = "yes" ] ; then
            print_debug "Converting Variable Name ${var} value to 'On'"
            unset "$1"
            if [ -n "$2" ] ; then
                case "$2" in
                    "UPPERCASE" | "uppercase" | "UPPER" | "upper" | "UC" | "uc" )
                        export "$1=ON"
                    ;;
                    "LOWERCASE" | "lowercase" | "LOWER" | "lower" | "LC" | "lc" )
                        export "$1=on"
                    ;;
                esac
            else
                export "$1=ON"
            fi
    elif [ "$value" = "FALSE" ] || [ "$value" = "false" ] || [ "$value" = "NO" ] || [ "$value" = "no" ] ; then
            print_debug "Converting Variable Name ${var} value to 'Off'"
            unset "$1"
            if [ -n "$2" ] ; then
                case "$2" in
                    "UPPERCASE" | "uppercase" | "UPPER" | "upper" | "UC" | "uc" )
                        export "$1=OFF"
                    ;;
                    "LOWERCASE" | "lowercase" | "LOWER" | "lower" | "LC" | "lc" )
                        export "$1=off"
                    ;;
                esac
            else
                export "$1=off"
            fi
    fi
}

## Timesaver for if statements
## Usage: if var_false $VARNAME ; then ... fi
var_false() {
    [ "${1}" = "FALSE" ] || [ "${1}" = "false" ] || [ "${1}" = "NO" ] || [ "${1}" = "no" ]
}

var_notfalse() {
    [ "${1}" != "FALSE" ]
}

var_nottrue() {
    [ "${1}" != "TRUE" ]
}

var_true() {
    [ "${1}" = "TRUE" ] || [ "${1}" = "true" ] || [ "${1}" = "YES" ] || [ "${1}" = "yes" ]
}

## Wait for Directory to exist
## Usage: wait_for_directory socketname
wait_for_directory() {
    print_debug "Looking for existence of directory: $1"
    while [ ! -d "${1}" ] ; do
      sleep 1
    done
}

## Wait for File to exist
## Usage: wait_for_file filename
wait_for_file() {
    print_debug "Looking for existence of file: $1"
    while [ ! -f "${1}" ] ; do
      sleep 1
    done
}

## Wait for Port to exist
## Usage: wait_for_port hostname port
wait_for_port() {
    print_debug "Looking for existence of listening port on $1:$2"
    counter=0
    while ! (nc -z "${1}" "${2}") ; do
            sleep 5
            (( counter+=5 ))
            print_warn "Host '${1}' is not listening on port '${2}', retrying.. ($counter seconds so far)"
    done
}

## Wait for Socket to exist
## Usage: wait_for_socket socketname
wait_for_socket() {
    print_debug "Looking for existence of socket: $1"
    while [ ! -S "${1}" ] ; do
      sleep 1
    done
}


## Convert YES or NO statements to either TRUE or FALSE
## Usage: 'yesno_truefalse varname'
## Don't prefix it with a $
## Optionally add "uppercase" / "lowercase" as second value on how you wish it to be replaced
yesno_truefalse() {
    value=$(set | grep "${1}"= | cut -d '=' -f2)
    var=$(set | grep "${1}"= | sed "s/=.*//g")

    if [ "$value" = "TRUE" ] || [ "$value" = "true" ] || [ "$value" = "YES" ] || [ "$value" = "yes" ] ; then
            print_debug "Converting Variable Name ${var} value to 'yes'"
            unset "$1"
            if [ -n "$2" ] ; then
                case "$2" in
                    "UPPERCASE" | "uppercase" | "UPPER" | "upper" | "UC" | "uc" )
                        export "$1=TRUE"
                    ;;
                    "LOWERCASE" | "lowercase" | "LOWER" | "lower" | "LC" | "lc" )
                        export "$1=true"
                    ;;
                esac
            else
                export "$1=TRUE"
            fi
    elif [ "$value" = "FALSE" ] || [ "$value" = "false" ] || [ "$value" = "NO" ] || [ "$value" = "no" ] ; then
            print_debug "Converting Variable Name ${var} value to 'no'"
            unset "$1"
            if [ -n "$2" ] ; then
                case "$2" in
                    "UPPERCASE" | "uppercase" | "UPPER" | "upper" | "UC" | "uc" )
                        export "$1=FALSE"
                    ;;
                    "LOWERCASE" | "lowercase" | "LOWER" | "lower" | "LC" | "lc" )
                        export "$1=false"
                    ;;
                esac
            else
                export "$1=FALSE"
            fi
    fi
}

## Keep this last
case "$DEBUG_MODE" in
            "TRUE" | "true" )
                CONTAINER_LOG_LEVEL="DEBUG"
                set -x
            ;;
            "FALSE" | "false" )
                :
            ;;
            * )
                if [ "$(dirname "$0")" = "/var/run/s6/etc/cont-init.d" ] ; then
                        if [ "$DEBUG_MODE" = "$(basename \""$0"\")" ] ; then
                            print_notice "Enabling Debug mode for $(basename \""$0"\") scripts"
                            set -x
                        fi
                fi
                if [ "$DEBUG_MODE" = "$(basename "$PWD")" ] ; then
                    print_notice "Enabling Debug mode for $(basename "$PWD") scripts"
                    set -x
                fi

            ;;
esac
